"use strict";

const assert = require('chai').assert;
const AMF = require('../src/amf.js');

describe('Array', () => {
  describe("amf.js", () => {
    it('can parse integer 6', () => {
      let buf = AMF.makeArrayBuffer('04 06');
      assert.equal(AMF.deserialize(buf), 6);
    });

    it('can parse variable-length unsigned integer 2^28 - 1', () => {
      let buf = AMF.makeArrayBuffer('04 bf ff ff ff');
      assert.equal(AMF.deserialize(buf), Math.pow(2,28)-1);
    });

    it('can parse variable-length unsigned integer 2^29 - 1', () => {
      let buf = AMF.makeArrayBuffer('04 ff ff ff ff');
      assert.equal(AMF.deserialize(buf), Math.pow(2,29)-1);
    });

    it('can parse string "hi"', () => {
      let buf = AMF.makeArrayBuffer('06 05 68 69');
      assert.equal(AMF.deserialize(buf), "hi");
    });

    it('can parse utf-8 string "⑥⑥⑥"', () => {
      let buf = AMF.makeArrayBuffer('06 13 e2 91 a5 e2 91 a5 e2 91 a5');
      assert.equal(AMF.deserialize(buf), "⑥⑥⑥");
    });

    it('can parse dynamic object { him: 3 }', () => {
      let buf = AMF.makeArrayBuffer('0a 0b 01 07 68 69 6d 04 03 01');
      assert.deepEqual(AMF.deserialize(buf), { him: 3 });
    });

    it('can parse reference strings { hi: "hi" }', () => {
      let buf = AMF.makeArrayBuffer('0a 0b 01 05 68 69 06 00 01');
      assert.deepEqual(AMF.deserialize(buf), { hi: "hi" });
    });

    it('can parse undefined', () => {
      let buf = AMF.makeArrayBuffer('00');
      assert.equal(AMF.deserialize(buf), undefined);
    });

    it('can parse null', () => {
      let buf = AMF.makeArrayBuffer('01');
      assert.equal(AMF.deserialize(buf), null);
    });

    it('can parse false', () => {
      let buf = AMF.makeArrayBuffer('02');
      assert.equal(AMF.deserialize(buf), false);
    });

    it('can parse true', () => {
      let buf = AMF.makeArrayBuffer('03');
      assert.equal(AMF.deserialize(AMF.makeArrayBuffer('03')), true);
    });

    it('can parse double 15.24', () => {
      let buf = AMF.makeArrayBuffer('05 40 2e 7a e1 47 ae 14 7b');
      assert.equal(AMF.deserialize(buf), 15.24);
    });

    it('can parse date', () => {
      let buf = AMF.makeArrayBuffer('08 01 42 75 5f a3 77 83 20 00');
      let d = AMF.deserialize(buf);
      assert.equal(typeof d, 'object');
      assert.equal(d.constructor.name, 'Date');
      assert.equal(d.getTime(), 1468781787186);
    });

    it('can parse array', () => {
      let buf = AMF.makeArrayBuffer('09 09 01 04 01 04 02 04 03 04 04');
      assert.deepEqual(AMF.deserialize(buf), [1,2,3,4]);
    });

    it.only('can parse self-referencing object', () => {
      let buf = AMF.makeArrayBuffer(
        '0a 0b 01 03 65 0a 01 03 63 04 03 01 09 73 65 6c 660a000361040103640a01036204020101');
      assert.deepEqual(AMF.deserialize(buf), {});
    });

    it('can be useful for my own purposes', () => {
      let buf = AMF.makeArrayBuffer(
        '0a 0b 01 03 66 09 0f 01 '+
        '0a 01 03 68 04 15 03 79 04 81 5b 03 77044303620c8473b8021f061f803c3886031f803338518008381f86011f803f511f061f5180314e800c400506518030034e800b4e03020e1f40802e4e03800c1c8301020e82013435802b4d800d830282038302b50180364e830206050e0283051cb503802238800c35030586020e0283101cb50480165138800b278605050e8317021b4d801038061f518008518608050e02830c82091bb402800db7015080085106850b0e02830a820e0e850137403480161b82068304028e04850186010e02830382058e018603050e82013480151c830b02058608050e020382028e01860705820134801735830a0205860a0e03020e850186080e4d801b351c8307020e86070e83050e850386041e801f351c83060e86040e83090e85058601518021351c83040e05060e830d0e8d01b703518024351c8302028310024d802cb512348010037804816a010a0102042104048144060443080c8509800a3880ff80ff80da38803b5138860338803c511f860251803e519f0100518040381f80404d020e1f3837802f1c800c3503020e050e021bb501802a0334800c1c8301820383021c354e8026344d800d8302020e82018305b50180235138800d4e83010e06050e0283071c354e80209f0151800c1c0286030e02830e1cb50480155186011f800b518606050e83161b3480101f86023880091f8608050e02830c82071b80111f38b701800851b8011f85080e02830b82071bb40180201c82018309028e0285028601050e02830182070eb80151801b4e1c830b0e8609058e0182038e0186053851801b351c8309020586090582020e058608051b801c351c830702058606050182050e8503860450801f351c8305020e860305028308020e850486011f8022351c83040e060502830c020e0d0eb7038025351c8313021b802db51234800f0a048168010a0102041404048143060443080c847f51b8021f06803c511f860338803d513886023851803e3886031e344d803c270586010e820103b501802a354e800b8301028501820283021c354e80274d800b4e8302820383051c4e80334e8302010e820183091cb501802051800c1c83010506050e02830eb5044e80180651800b1c058603050e028317b40180129f015180091f86070502830e82091bb4014d800e1e3880081f860a050e8312820827388017b701278e01058e0602830182038e020506050e830482058e0186031e3480171c830b02058608050e02830282018e01058605050e82014d801535830b020e860a050203028501860805021b4d8018351c83090e8607050e8304020e8502860527801d351c830702058603050e8308020e850486011f802034358305020506050e830c028e021eb7025180224e35830402830f82014d802a4d3583121b4d800e0a048168010a0102041304048141060445080c847b800151b8021f860151803a5138860727803c381f8604050234803d381f86020e82011c354e803a4e020586010e820183021c354e80364e8301028e01820283051c354e80334e8302820483191cb5064e800c51800b4e83020506050e02831d8205b401800751061f51800a35030e8603050e02831a82090e1fb802b70185023851800a0e8607050e0283178203010e06050e010e85031eb701800d1f860685040e02830582018e0185010e830a0e05860305820227508012b7011e0e85018e040283030285018608050283048e0186070e82013480161c830c0e05860b0e8301850286080e023480164e35830c020e86080e8304020e85048603054d801bb501830a0e058603050e8308020e850737801f351c830702850202830c028e018d015980254d351c830482018310021b802b4d351c831202348030b404801e0a048169010a0102040f0404814d060444080c84698007b501804127021c3580321f3851800451b8018601058202033580134eb50483041c358305b404b80286041f511f86070582038301b5024e80034eb5041c831302050e820205860385031e37800137380586040582038321020e86020e020e8506378008501e8503820483108201830b0e860505028e0185013750800b830282028e038201830b020e058601058e01028304020e860805820127800e4e830305860585010e028304020e058608050e0203028509860105820180101c0205860485050e830205860b050283038e0185088e011b80105085088e0183060e8502860485010e8307028e0185028e01021b4d8014278e0302830b0e85050e830c020e82024d80174e83110e85010e830f820134801a4eb5011c0283201b8024b401b5028201830a8202b502b4014d80314db404801e0a04816b010a0102041004048159060444080c852180364eb501341b0234800951b80205278025351c83058203011f518004b8018606050234801c4eb502830882040186021f518004b801860505820134354e8012b503830e820301860638800550381f86020e820283031cb5041c831a8204058606850180064e028e01050e82038321020e060e82018507375080074e83028201018e0102831f020e86030e020e85033750800b4e8302018603058e0102830b020e050e028308020e86060e82010e5080101c028608050e028304028e01860585010e0283020e0586090e8201801151860385068e0102830102860d0203028e01850686030e1b8011b7020e85038e01028306020e058607050e8305020e85083780154e0302830d0e85018603050e830a020e85010d0e1b4d80174e830f020e85020e830e820234801d34b50102830a020e8310021b80254db5011c83128201b5024d802c4d34b5011cb503b4014d80190a04816a010a0102040f04048160060444080c845f8003b8020605803a3886070e34803351800451381f86050e02344d802e511f8601388006513886030e82021cb5014e80094eb5041c83091cb504b4040186083880061c020e8501820383238e01820101860285041e3780071c830182020e820283200e860205020e85041e37800b1c83020e8602058e0102830d8e0102830a0e86050582018e0150800f4e03028607050e028306028e018603050e028304020e86080e82013480111e860585050e0203020e05860a050e020302850486060e0234801051b80185058e02830502850186090e0283038e0185092780151c8202830b0e850186050e028307020e85040d275980171c830f0e850106050e02830c020e820134801b4eb5011c830b028e0102830f021b80234db5011c83181c4d802a4db5011c8304021cb503b4024d80140a04816a010376049c90890001');
      console.log(JSON.stringify(AMF.deserialize(buf), null, 2));
    });
  });
});
